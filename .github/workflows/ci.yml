on: push
name: Continuous Integration

jobs:
#
#  php-unit-tests:
#
#    name: Run PHP Unit Tests
#    runs-on: ubuntu-latest
#
#    steps:
#
#      - name: Git checkout Core
#        uses: actions/checkout@v2
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@v1
#        with:
#          php-version: '7.4'
#          coverage: none
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
#
#      - name: Setup cached dependencies
#        uses: actions/cache@v1
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-
#
#      - name: Install Dependencies
#        run: composer install --prefer-dist --no-interaction --optimize-autoloader
#
#      - name: Run PHPUnit
#        run: vendor/bin/phpunit tests

  build-and-deploy-to-stage:

    name: Build Docker Image & Deploy to Stage Environment
#    needs: php-unit-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devbeat
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deploy/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: deploy/ecs-task-definition.json
        container-name: devbeat-app-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: devbeat-staging
        cluster: devbeat
        wait-for-service-stability: true
        wait-for-minutes: 1
